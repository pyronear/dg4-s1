import numpy as np
import open3d as o3d
import laspy
import os
import glob
import urllib.request

def las_to_point(las):
    '''Convert a las object into an array of points x,y,z

    Args:
        las (laspy.LasData): data read from las or laz file

    Returns:
        np.array: reshaped data
    '''
    return np.stack([las.x, las.y, las.z], axis=0).transpose((1, 0))

def downsample(array, by:int): 
    '''Take 1 in "by" elements of array

    Args:
        array (np.array): the data to downsample
        by (int): divide the length of array by this number

    Returns:
        np.array: downsampled data
    '''
    indices = list(range(0,len(array),by))
    downsampled = np.take(array, indices, axis=0)
    return downsampled

def downsample_las(las, by:int): 
    '''Downsample las and then extract las points

    Args:
        las (laspy.LasData): data read from las or laz file
        by (int): divide the length of array by this number

    Returns:
        np.array: reshaped and downsampled data
    '''
    indices = list(range(0,len(las.x),by))
    x = np.take(las.x, indices, axis=0)
    y = np.take(las.y, indices, axis=0)
    z = np.take(las.z, indices, axis=0)
    points = np.stack([x, y, z], axis=0).transpose((1, 0))
    return points

def download_list(datadir, url_file):
    '''Download a list of urls contained in a file

    Args:
        datadir (str): directory where to store data
        url_file (str): filename of the list of urls
    '''
    with open(url_file) as file:
        lines = [line.rstrip() for line in file]
    for link in lines:
        filename = link.split('/')[-1]
        print("Downloading", filename)
        urllib.request.urlretrieve(link, datadir+filename)

def load_las_data(datadir, downsampleby=1000):
    '''Get point cloud from files

    Args:
        datadir (str): directory where to store data
        downsampleby (int, optional): divide the length of array by this number. Defaults to 1000.

    Returns:
        o3d.geometry.PointCloud(): point cloud
    '''
    point_data = np.array([]).reshape(0,3)
    for file in glob.glob(datadir+"*.laz"):
        print("Loading", file)
        las = laspy.read(file)
        new_points = downsample_las(las, downsampleby)
        point_data = np.concatenate((point_data, new_points))
    print("Number of points:", point_data.shape[0])
    # convert to open3d point cloud
    pc = o3d.geometry.PointCloud()
    pc.points = o3d.utility.Vector3dVector(point_data)
    return pc

def download_and_load(datadir, urls_file, downsampleby:int):
    '''One by one: download url, load file, delete file and save extracted pointcloud data for a bunch of 25 files. 
    You can avoid overloading storage space by using download_and_load() instead of download_list() followed by load_las_data().

    Args:
        datadir (str): directory where to store data
        urls_file (str): filename of the list of urls
        downsampleby (int): divide the length of array by this number
    '''
    # read list of urls
    with open(urls_file) as file:
        lines = [line.rstrip() for line in file]
    nb_lines = len(lines)-1
    checkpoint = 25
    nb_check = 1
    point_data = np.array([]).reshape(0,3)
    # process each link
    for i, link in enumerate(lines):
        filename = link.split('/')[-1]
        current_item = f"{i}/{nb_lines} - {filename} - "
        # download the file
        print(current_item+"Downloading", end=' - ')
        try:
            urllib.request.urlretrieve(link, datadir+filename)
        except:
            print("ERROR")
        else:
            # load the laz file
            print("Loading")
            las = laspy.read(datadir+filename)
            # extract needed data 
            new_points = downsample_las(las, downsampleby)
            del las
            point_data = np.concatenate((point_data, new_points))
            del new_points
            # delete file
            os.remove(datadir+filename)
        finally:
            # every 25 files (or last one), save the extracted data points in a pcd file
            if (i%checkpoint==0 and i!=0) or i==nb_lines:
                # convert to open3d point cloud
                pc = o3d.geometry.PointCloud()
                pc.points = o3d.utility.Vector3dVector(point_data)
                # save point cloud
                o3d.io.write_point_cloud(datadir+f"terrain_{nb_check}.pcd", pc)
                print("saved pcd", nb_check)
                nb_check+=1
                # reset point_data
                point_data = np.array([]).reshape(0,3)
                del pc

def load_pcd(datadir, save=""):
    '''Aggregate pcd files generated by download_and_load()

    Args:
        datadir (str): directory where to store data
        save (str, optional): if not empty, save the aggregated data within the requested filename. 
        Files deletion is left to the user. Defaults to "".

    Returns:
        o3d.geometry.PointCloud(): point cloud
    '''
    pc = o3d.geometry.PointCloud()
    for file in glob.glob(datadir+"terrain_*.pcd"):
        pc += o3d.io.read_point_cloud(file)
    if save:
        print("saved")
        o3d.io.write_point_cloud(datadir+save+".pcd", pc)
    return pc